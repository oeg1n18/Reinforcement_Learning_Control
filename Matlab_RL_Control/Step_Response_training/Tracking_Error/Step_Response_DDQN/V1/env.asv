classdef env < handle
    %ENV Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        state; 
        OLTF; 
        CLTF;
        gains;
        delta = 0.1;
        reward_weights = [1,1,1,1];
    end
    
    methods
        function obj = env(G, gain_params)
            %ENV Construct an instance of this class
            %   Detailed explanation goes here
            obj.OLTF = G; 
            obj.gains = gain_params;
            obj.CLTF = get_sys(G, gain_params);
        end
        
        function outputArg = step(obj,action)
            %METHOD1 Summary of this method goes here
            obj.gains = update_gains(obj.gains, action, obj.delta);
            obj.CLTF = get_sys(G, obj.gains);
            response = stepinfo(obj.CLTF);
            obj.state = [response.Overshoot, response.RiseTime, response.SettlingTime, 1-response.SettlingMax];
            
        end
        
        function r = reward(obj)
            r = 4;
        end
    end
end



function [sys] = get_sys(G,gains)
    %GET_SYS Gets the Control system transfer function. 
    num = gains;
    den = [1,0];
    C = tf(num, den);
    sys = feedback(G*C, 1);
end


function [Kp, Ki, Kd] = update_gains(in_gains, action, d)
%UPDATE_GAINS Summary of this function goes here
%   Detailed explanation goes here
    Kp = in_gains(1); 
    Ki = in_gains(2); 
    Kd = in_gains(3); 
    
    delta = d;
    if action == 1
        Kp = in_gains(1) + delta; 
    elseif action == 2
        Kp = in_gains(1) - delta; 
    elseif action == 3 
        Ki = in_gains(2) + delta; 
    elseif action == 4
        Ki = in_gains(2) - delta; 
    elseif action == 5 
        Kd = in_gains(3) + delta; 
    elseif action == 6
        Kd = in_gains(3) - delta; 
    elseif action == 7
        Kp = in_gains(1); 
        Ki = in_gains(2); 
        Kd = in_gains(3);
    end
    
    
    % Check for any negative values; 
    if Kp < 0.3
        Kp = 0.3; 
    elseif Ki < 0.3
        Ki = 0.3; 
    elseif Kd < 0.3
        Kd = 0.3; 
    end
        
end